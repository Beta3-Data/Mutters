buildscript {
    repositories {
        jcenter()
    }
    dependencies {
       classpath 'de.undercouch:gradle-download-task:3.1.1'
    }
}

apply plugin: 'java'
apply plugin: 'de.undercouch.download'



repositories {   
    mavenCentral()
}

dependencies {
    compile 'org.apache.opennlp:opennlp-tools:1.6.0'
}

// build model
task generateIntentModel(type:JavaExec) {
   main = 'opennlp.tools.cmdline.CLI'
   classpath = sourceSets.main.runtimeClasspath
   args = ['DoccatTrainer',
           '-model',
           'build/resources/main/models/en-cat-taxi-intents.bin',
           '-lang',
           'en',
           '-data',
           'src/main/resources/models/TaxiBotIntents.txt',
           '-encoding', 
           'UTF-8',
           '-featureGenerators',
           'opennlp.tools.doccat.NGramFeatureGenerator,opennlp.tools.doccat.BagOfWordsFeatureGenerator',
           '-params',
           'src/main/resources/models/TaxiBotIntentsParams.txt',
           '-tokenizer',
           'opennlp.tools.tokenize.WhitespaceTokenizer']
}

task generateAddressModel(type:JavaExec) {
   main = 'opennlp.tools.cmdline.CLI'
   classpath = sourceSets.main.runtimeClasspath
   args = ['TokenNameFinderTrainer',
           '-model',
           'build/resources/main/models/en-ner-address.bin',
           '-lang',
           'en',
           '-data',
           'src/main/resources/models/NERAddresses.txt',
           '-encoding', 
           'UTF-8',
           '-params',
           'src/main/resources/models/NERAddressesParams.txt']
}


// these snippets from https://github.com/spinscale/elasticsearch-ingest-opennlp

// download the models before the tests are run, also needed for packaging



// download the models but dont overwrite existing ones
task downloadModels << {  
  downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-person.bin',   'en-ner-persons.bin')
  downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-location.bin', 'en-ner-locations.bin')
  downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-date.bin',     'en-ner-dates.bin')
}

def downloadIfNotExists(String url, String file) {
  def dir = project.file('build' + File.separator + 'resources' + File.separator + 'main' + File.separator + 'models')
     
  //print(new File(dir).getAbsolutePath())
  dir.mkdirs()
  if (new File(dir,file).exists() == false) {
    download {
      src url
      dest new File(dir, file)
    }
  }
}

//jar.dependsOn downloadModels
//jar.dependsOn generateIntentModel
//jar.dependsOn generateAddressModel

//project.afterEvaluate {
  processResources.finalizedBy downloadModels
  processResources.finalizedBy generateIntentModel
  processResources.finalizedBy generateAddressModel
//}
